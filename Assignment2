#Basics of Probability

import random

def coin_toss_simulation(trials=10000):
    heads = 0
    tails = 0
    for _ in range(trials):
        toss = random.choice(['H', 'T'])
        if toss == 'H':
            heads += 1
        else:
            tails += 1
    print(f"Coin Toss Simulation ({trials} trials):")
    print(f"  Heads: {heads} ({heads/trials:.4f})")
    print(f"  Tails: {tails} ({tails/trials:.4f})\n")

def dice_sum_simulation(trials=10000):
    sum_seven = 0
    for _ in range(trials):
        die1 = random.randint(1, 6)
        die2 = random.randint(1, 6)
        if die1 + die2 == 7:
            sum_seven += 1
    print(f"Dice Sum = 7 Simulation ({trials} trials):")
    print(f"  Probability of getting sum 7: {sum_seven/trials:.4f}\n")

def probability_at_least_one_six(trials=10000):
    success_count = 0
    for _ in range(trials):
        got_six = False
        for _ in range(10):
            if random.randint(1, 6) == 6:
                got_six = True
                break
        if got_six:
            success_count += 1
    print(f"Probability of getting at least one '6' in 10 rolls ({trials} trials):")
    print(f"  Estimated Probability: {success_count/trials:.4f}")

coin_toss_simulation()
dice_sum_simulation()
probability_at_least_one_six()



#Conditional Probability and Bayes' Theorem

import random

colors = ['red'] * 5 + ['green'] * 7 + ['blue'] * 8

trials = 1000
draws = [random.choice(colors) for _ in range(trials)]

count_blue_followed_by_red = 0
count_prev_blue = 0

for i in range(1, trials):
    if draws[i - 1] == 'blue':
        count_prev_blue += 1
        if draws[i] == 'red':
            count_blue_followed_by_red += 1

p_red_given_blue = count_blue_followed_by_red / count_prev_blue if count_prev_blue > 0 else 0

count_red = draws.count('red')
count_blue = draws.count('blue')
p_red = count_red / trials
p_blue = count_blue / trials
p_blue_given_red = sum(1 for i in range(1, trials) if draws[i] == 'red' and draws[i - 1] == 'blue') / count_red

p_bayes_red_given_blue = (p_blue_given_red * p_red) / p_blue if p_blue > 0 else 0

print(f"P(Red | Previous was Blue) from simulation: {p_red_given_blue:.4f}")
print(f"P(Red | Blue) using Bayes' Theorem: {p_bayes_red_given_blue:.4f}")



#Random Variables and Discrete Probability

import numpy as np

values = [1, 2, 3]
probabilities = [0.25, 0.35, 0.40]
sample_size = 1000

sample = np.random.choice(values, size=sample_size, p=probabilities)

mean = np.mean(sample)
variance = np.var(sample)
std_dev = np.std(sample)

print("First 10 values from the sample:", sample[:10])
print(f"Empirical Mean: {mean:.4f}")
print(f"Empirical Variance: {variance:.4f}")
print(f"Empirical Standard Deviation: {std_dev:.4f}")



#Continuous Random Variables

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import expon

scale = 5
samples = np.random.exponential(scale=scale, size=2000)

plt.figure(figsize=(10, 6))
plt.hist(samples, bins=30, density=True, alpha=0.6, color='skyblue', label='Histogram')

x = np.linspace(0, np.max(samples), 1000)
pdf = expon.pdf(x, loc=0, scale=scale)
plt.plot(x, pdf, 'r-', linewidth=2, label='Exponential PDF')

plt.title('Histogram and PDF of Exponential Distribution (mean=5)')
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()
plt.grid(True)
plt.show()


#Central Limit Theorem
import numpy as np
import matplotlib.pyplot as plt

data = np.random.uniform(low=0, high=1, size=10000)
sample_means = []

for _ in range(1000):
    sample = np.random.choice(data, size=30, replace=False)
    sample_means.append(np.mean(sample))

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.hist(data, bins=30, color='skyblue', edgecolor='black', density=True)
plt.title('Original Uniform Distribution')
plt.xlabel('Value')
plt.ylabel('Density')

plt.subplot(1, 2, 2)
plt.hist(sample_means, bins=30, color='salmon', edgecolor='black', density=True)
plt.title('Distribution of Sample Means (n=30)')
plt.xlabel('Sample Mean')
plt.ylabel('Density')

plt.tight_layout()
plt.show()
